use build_config::LogLevel;
use quote::quote;
use std::fs::File;
use std::io::Write;
use std::path::{Path, PathBuf};
use std::{env, fs};

const LINKER: &[u8] = include_bytes!("riscv64-qemu.ld");

fn main() -> anyhow::Result<()> {
    let out_dir = PathBuf::from(env::var_os("OUT_DIR").unwrap());

    if let Some(raw_cfg) = option_env!("K23_KCONFIG") {
        let cfg = ron::from_str(raw_cfg)?;
        make_kconfig(cfg, &out_dir)?;
    }

    let ld = out_dir.join("linker.ld");
    fs::write(&ld, LINKER).unwrap();

    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-env-changed=LOG");
    println!("cargo:rustc-link-arg=-T{}", ld.display());

    Ok(())
}

fn make_kconfig(cfg: build_config::Config, out_dir: &Path) -> anyhow::Result<()> {
    let stack_size_pages = cfg.kernel.stack_size_pages;
    let log_level = match cfg.kernel.log_level {
        LogLevel::Error => quote!(::log::Level::Error),
        LogLevel::Warn => quote!(::log::Level::Warn),
        LogLevel::Info => quote!(::log::Level::Info),
        LogLevel::Debug => quote!(::log::Level::Debug),
        LogLevel::Trace => quote!(::log::Level::Trace),
    };
    let memory_mode = match cfg.memory_mode {
        build_config::MemoryMode::Riscv64Sv39 => quote!(::vmm::Riscv64Sv39),
        build_config::MemoryMode::Riscv64Sv48 => quote!(::vmm::Riscv64Sv48),
        build_config::MemoryMode::Riscv64Sv57 => quote!(::vmm::Riscv64Sv57),
    };
    let uart_baud_rate = cfg.kernel.uart_baud_rate;

    let mut file = File::create(out_dir.join("kconfig.rs"))?;
    writeln!(file, "// Generated by build.rs, do not touch!")?;
    writeln!(
        file,
        "{}",
        quote!(
            pub const STACK_SIZE_PAGES: usize = #stack_size_pages;
            pub const LOG_LEVEL: ::log::Level = #log_level;
            pub const UART_BAUD_RATE: u32 = #uart_baud_rate;
            #[allow(non_camel_case_types)]
            pub type MEMORY_MODE = #memory_mode;
            pub const PAGE_SIZE: usize = <MEMORY_MODE as ::vmm::Mode>::PAGE_SIZE;
        )
    )?;

    Ok(())
}
