[package]
name = "cranelift-codegen"
version.workspace = true
edition.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
bumpalo.workspace = true
cranelift-bforest.workspace = true
cranelift-codegen-shared = { path = "./shared" }
cranelift-entity.workspace = true
gimli = { workspace = true, optional = true, features = ["read", "write"] }
log.workspace = true
smallvec.workspace = true
target-lexicon.workspace = true
regalloc2.workspace = true
hashbrown.workspace = true
onlyerror.workspace = true
spin.workspace = true
fxhash.workspace = true

[build-dependencies]
cranelift-codegen-meta = { path = "meta" }
cranelift-isle = { path = "../cranelift-isle" }

#cranelift-isle.workspace = true

[features]
default = ["unwind", "host-arch"]

# Enables detailed logging which can be somewhat expensive.
trace-log = ["regalloc2/trace-log"]

# Enable tracking how long passes take in Cranelift.
#
# Enabled by default.
#timing = []

# This enables unwind info generation functionality.
unwind = ["gimli"]

# ISA targets for which we should build.
# If no ISA targets are explicitly enabled, the ISA target for the host machine is enabled.
x86 = []
arm64 = []
s390x = []
riscv64 = []
# Enable the ISA target for the host machine
host-arch = []

# Option to enable all architectures.
all-arch = [
    "x86",
    "arm64",
    "s390x",
    "riscv64"
]

# Report any ISLE errors in pretty-printed style.
isle-errors = ["cranelift-isle/fancy-errors"]

# Put ISLE generated files in isle_generated_code/, for easier
# inspection, rather than inside of target/.
isle-in-source-tree = []